/* 
 *  ESP8266-01 and a single WS2812 neopixel (or strip)
 *  Connects to your wifi and subscribes to an MQTT topic
 *  Listens for incoming RRRGGGBBBWWW codes and changes the color
 *  Original code https://github.com/joshhodgson/ESPNeopixelMQTTDriver
 *  May 19, 2017
 * 
 */
 
#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <Adafruit_NeoPixel.h>
 
// The pin the neopixel is on, I am using an ESP-01 so its 0 or 2.
#define NEO_PIN 2
 
// how many pixels you have, max 16?
#define NUM_LEDS 1
 
Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUM_LEDS, NEO_PIN, NEO_GRBW + NEO_KHZ800);
 
// Update these with values suitable for your network.
const char* ssid = "xxxxxx";
const char* password = "xxxxxx";
const char* mqtt_server = "10.0.0.10";
const char* clientId = "esp-notifier"; 
const char* inTopic = "notifier/In/";
const char* outTopic = "notifier/Out/";
 
float red = 0.0;
float green = 0.0;
float blue = 0.0;
float white = 0.0;
bool fading = 0;
int targetN = 0;
 
int targetRed, targetBlue, targetGreen, targetWhite;
 
WiFiClient espClient;
PubSubClient client(espClient);
long lastMsg = 0;
char msg[50];
int value = 0;
 
void setup() {
  Serial.begin(9600);
  
  strip.begin();
  strip.setPixelColor(0, strip.Color(0, 0, 0, 0)); // default the pixel to off
  strip.show();
  
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
}
 
void setup_wifi() {
  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
 
  WiFi.begin(ssid, password);
 
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
 
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}
 
 
void callback(char* topic, byte* payload, unsigned int length) {
  String message = "";
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
    message += (char)payload[i];
  }
  Serial.println();
 
  String thistopic = String(topic);
//  Serial.println(thistopic);
 
  // BLOCK COLOR - rrrgggbbbwww
  if (thistopic == inTopic) {
    Serial.println("Setting color to"); // Send a reply
    Serial.println(message);
 
    targetRed = message.substring(0, 3).toInt();
    targetGreen = message.substring(3, 6).toInt();
    targetBlue = message.substring(6, 9).toInt();
    targetWhite = message.substring(9, 12).toInt();
    targetN = message.substring(12).toInt() / 10;
    if (targetN > 0) {
      fading = true;
    } else {
      for (uint16_t i = 0; i < strip.numPixels(); i++) {
        strip.setPixelColor(i, targetRed, targetGreen, targetBlue, targetWhite);
      }
      strip.show();
      red = targetRed;
      green = targetGreen;
      blue = targetBlue;
      white = targetWhite;
    }
  }
 
// Rainbow?
 
}
 
 
void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Attempt to connect
    if (client.connect(clientId, outTopic, 0, false, "disconnected")) {
      Serial.println("connected");
      // Once connected, publish an announcement...
      client.publish(outTopic, "connected");
      // ... and resubscribe
      client.subscribe(inTopic);
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}
 
 
 
void loop() {
 
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
  
  if (fading) {
    int n = 0;
    float deltaRed = (targetRed - red) / targetN;
    float deltaGreen = (targetGreen - green) / targetN;
    float deltaBlue = (targetBlue - blue) / targetN;
    float deltaWhite = (targetWhite - white) / targetN;
 
    while (fading) {
      red += deltaRed;
      green += deltaGreen;
      blue += deltaBlue;
      white += deltaWhite;
      for (uint16_t i = 0; i < strip.numPixels(); i++) {
        strip.setPixelColor(i, (int)red, (int)green, (int)blue, (int)white);
      }
      strip.show();
      n += 1;
      if (n >= targetN) {
        n = 0;
        fading = false;
      }
      delay(10);
      client.loop();
 
    }
 
  }
 
  yield();
 
}
